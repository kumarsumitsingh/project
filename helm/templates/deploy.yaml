## Set the API endpoint used to create the Deployment resource.
apiVersion: apps/v1
## Define the type of the resource.
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  annotations:
  labels:
    app: techtrends
  name: techtrends
  namespace:  {{ .Values.namespace.name }} 
## Define the desired configuration for the Deployment resource.
spec:
  ## Set the number of replicas.
  replicas: {{ .Values.replicaCount }} 
  ## Identify the pods managed by this Deployment using the following selectors.
  ## In this case, all pods with the label `go-helloworld`.
  selector:
    matchLabels:
      app: techtrends
  ## Set the RollingOut strategy for the Deployment.
  ## For example, roll out only 25% of the new pods at a time.
  ## Set the configuration for the pods.
  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `go-helloworld`
    metadata:
      labels:
        app: techtrends
    ## Define the desired state of the pod configuration.
    spec:
      containers:
        ## Set the image to be executed inside the container and image pull policy
        ## In this case, run the `go-helloworld` application in version v2.0.0 and
        ## only pull the image if it's not available on the current host.
      - image: sumitkumarsingh/techtrends:latest
        imagePullPolicy: IfNotPresent
        name: techtrends
        ## Expose the port the container is listening on.
        ## For example, exposing the application port 6112 via TCP.
        ports:
        - containerPort: {{ .Values.service.port }} 
          protocol: TCP
        ## Define the rules for the liveness probes.
        ## For example, verify the application on the main route `/`,
        ## on application port 6112. If the application is not responsive, then the pod will be restarted automatically. 
        livenessProbe:
           httpGet:
             path: /healthz
             port: {{ .Values.service.port }} 
        ## Define the rules for the readiness probes.
        ## For example, verify the application on the main route `/`,
        ## on application port 6112. If the application is responsive, then traffic will be sent to this pod.
        readinessProbe:
           httpGet:
             path: /healthz
             port: {{ .Values.service.port }} 
        ## Set the resource requests and limits for an application.
        resources:
        ## The resource requests guarantees that the desired amount 
        
          requests:
            memory: {{ .Values.resources.requests.memory }} 
            cpu: {{ .Values.resources.requests.cpu }} 
        ## The resource limits ensure that the application is not consuming 
        
          limits:
            memory: {{ .Values.resources.limits.memory }} 
            cpu: {{ .Values.resources.limits.cpu }} 
